lang en_US.UTF-8
keyboard us
timezone Europe/Rome
text
reboot

# Configure network to use DHCP and activate on boot
network --bootproto=dhcp --device=link --activate --onboot=on --hostname=edge-local

# Partition disk with a 1GB boot XFS partition and an LVM volume containing a 8GB+ system root
# The remainder of the volume will be used by the CSI driver for storing data
#
# For example, a 20GB disk would be partitioned in the following way:
#
# NAME          MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
# sda             8:0    0  20G  0 disk
# ├─sda1          8:1    0   1G  0 part /boot
# └─sda2          8:2    0  19G  0 part
#  └─rhel-root  253:0    0   8G  0 lvm  /sysroot
#
zerombr
clearpart --all --initlabel
part /boot/efi --fstype=efi --size=200
part /boot --fstype=xfs --asprimary --size=800
# Uncomment this line to add a SWAP partition of the recommended size
#part swap --fstype=swap --recommended
part pv.01 --grow
volgroup rhel pv.01
logvol / --vgname=rhel --fstype=xfs --size=8192 --name=root

# Configure ostree
ostreesetup --nogpg --osname=rhel --remote=edge --url=file:///run/install/repo/ostree/repo --ref=$OSTREE_REF


%post --log=/var/log/anaconda/post-install.log --erroronfail

# Add the default user and enable passwordless sudo. Add password and/or authorized keys if configured.
useradd -m -d "/home/$USER_NAME" -G wheel "$USER_NAME"
[ -n '$USER_PASS_ENCRYPTED' ] && usermod -p '$USER_PASS_ENCRYPTED' "$USER_NAME"
if [ -n '$USER_AUTHORIZED_KEY' ]; then
    mkdir -p "/home/$USER_NAME/.ssh"
    chmod 755 "/home/$USER_NAME/.ssh"
    tee "/home/$USER_NAME/.ssh/authorized_keys" > /dev/null <<EOAUTHORIZEDKEY
$USER_AUTHORIZED_KEY
EOAUTHORIZEDKEY
    chown "$USER_NAME." "/home/$USER_NAME/.ssh"
fi
echo -e '$USER_NAME\tALL=(ALL)\tNOPASSWD: ALL' >> /etc/sudoers

# Configure where rpm-ostree looks for ostree updates
echo -e 'url=$OSTREE_REPO_URL' >> /etc/ostree/remotes.d/edge.conf


# The pull secret is mandatory for MicroShift builds on top of OpenShift, but not OKD
# The /etc/crio/crio.conf.d/microshift.conf references the /etc/crio/openshift-pull-secret file
mkdir -p /etc/crio
cat > /etc/crio/openshift-pull-secret << EOPULLSECRET
$OCP_PULL_SECRET_CONTENTS
EOPULLSECRET
chmod 600 /etc/crio/openshift-pull-secret

# Configure the mandatory firewall rules that cannot (yet) be configured from blueprint
firewall-offline-cmd --zone=trusted --add-source=10.42.0.0/16
firewall-offline-cmd --zone=trusted --add-source=169.254.169.1

# for convenience, set up the kubeconfig when the user logs in
mkdir -p "/home/$USER_NAME/.kube"
chmod 755 "/home/$USER_NAME/.kube"
chown "$USER_NAME". "/home/$USER_NAME/.kube"
echo 'sudo cat /var/lib/microshift/resources/kubeadmin/kubeconfig > ~/.kube/config 2> /dev/null' >> "/home/$USER_NAME/.bashrc"

cat > /var/tmp/ansible-register.sh <<EOF
#!/bin/bash
conn_name=\$(nmcli con show | grep -v UUID | head -n 1 | awk '{print \$1}')
IP_ADDRESS=\$(nmcli conn show \$conn_name | grep ip_address | awk '{print \$4}')

#MAC_ADDRESS=\$(ip addr | grep wlp -A 1 | grep link | awk '{print \$2}' | sed 's/://g')
MAC_ADDRESS=\$(ip addr | grep \$conn_name -A 1 | grep link | awk '{print \$2}' | sed 's/://g')


if [ -z "\$IP_ADDRESS" ] || [ -z "\$MAC_ADDRESS" ] ; then
    echo "One or more required variables are empty. Script failed."
    exit 1
fi

JSON="{\
\"ip_address\": \"\$IP_ADDRESS\", \
\"mac_address\": \"\$MAC_ADDRESS\" \
}"

/usr/bin/curl -k -H 'Content-Type: application/json' --data "\$JSON" http://events-aap.apps.onlogic.lmf.openshift.es
EOF

chmod +x  /var/tmp/ansible-register.sh

cat > /etc/systemd/system/ansible-register.service <<EOF
[Unit]
Description=Register to Ansible Automation Platform
After=network.target
After=network-online.target
Wants=network-online.target
ConditionPathExists=!/var/tmp/aap-registered

[Service]
Type=simple
ExecStartPre=/bin/sh -c 'until ping -c1 google.com; do sleep 5; done'
ExecStart=/bin/bash -c 'while true; do /var/tmp/ansible-register.sh && /usr/bin/touch /var/tmp/aap-registered && break; done'

[Install]
WantedBy=default.target
EOF


chmod 600 /etc/crio/openshift-pull-secret

cat > /var/tmp/acm-register.sh <<EOF
#!/bin/bash
ACCESS_TOKEN='sha256~ba8B_Ind1ti-CvRIRQLZBqHsJ7flYQzX7uYZUJkjHUU'
HOST='https://agent-registration-multicluster-engine.apps.my.lmf.openshift.es'

curl -k -H "Authorization: Bearer '\$ACCESS_TOKEN'" '\$HOST'/agent-registration/crds/v1 | oc --kubeconfig /home/microshift/.kube/config apply -f -
curl -k -H "Authorization: Bearer '\$ACCESS_TOKEN'" '\$HOST'/agent-registration/manifests/microshift-$(tr -dc a-z0-9 </dev/urandom | head -c 5 ; echo '') | oc --kubeconfig /home/microshift/.kube/config apply -f -
EOF

chmod +x /var/tmp/acm-register.sh

cat > /etc/systemd/system/acm-register.service <<EOF
[Unit]
Description=Register to Advanced Cluster Manager
After=microshift.service
Requires=microshift.service
ConditionPathExists=!/var/tmp/acm-registered

[Service]
Type=simple
ExecStart=/bin/bash -c 'while true; do /var/tmp/acm-register.sh && /usr/bin/touch /var/tmp/acm-registered && break; done'

[Install]
WantedBy=default.target
EOF

systemctl daemon-reload
systemctl enable ansible-register.service
systemctl enable acm-register.service

%end
